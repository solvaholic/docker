name: Docker

# Use this workflow to:
# - Manually build and push an image from a branch
# - Automatically build and push on certain pushes
# - Automatically test new/udpated deployments

on:
  push:
    # Run this workflow if build files in main branch changed.
    branches:
      - main
    paths:
      - '*/Dockerfile'
      - '*/entrypoint.sh'
      - '*/vm_files/*'

  # Run when manually triggered
  workflow_dispatch:
    inputs:
      # User inputs the image to build, for example testbox
      appname:
        description: 'Image to build, for example testbox'
        required: true
        default: "testbox"

jobs:
  # Build and push any Dockerfile changed in this push.
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      sharef: ${{ steps.getver.outputs.sharef }}
      buildfiles: ${{ steps.listfiles.outputs.buildfiles }}
      images: ${{ steps.buildimage.outputs.images }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.after }}
          fetch-depth: '25'

      - name: Get version details
        # TODO: Re-ID me
        id: getver
        run: |
          _sha_ref="${{ github.sha }}"
          echo "Set sharef to '${_sha_ref}'."
          echo "::set-output name=sharef::${_sha_ref}"

      - name: List Dockerfiles to build
        id: listfiles
        # When a filename ending with /Dockerfile' has changed,
        # append it to a file named _files
        run: |
          _files=
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            _appname="${{ github.event.inputs.appname }}"
            _diff="${_appname}/Dockerfile"
          else
            _diff="$(git diff --name-only ${{ github.event.before }} \
              ${{ github.event.after }} | sed -n "/\/Dockerfile$/p" )"
          fi
          for _file in ${_diff}; do
            if [ -r "${_file}" ]; then _files="${_files} ${_file}"; fi
          done
          echo "::debug::_files is ..." && echo ${_files}
          if [ -z "${_files}" ]; then
            echo "Found zero changed Dockerfiles."
            exit 1
          else
            echo "::set-output name=buildfiles::${_files}"
          fi

      - name: Build image(s)
        id: buildimage
        # Get app name from parent dir, and build each tag:
        #   <repo-owner>/<app-name>:latest
        run: |
          _image_ver="${{ steps.getver.outputs.sharef }}"
          _files="${{ steps.listfiles.outputs.buildfiles }}"
          _images=

          for _thisfile in ${_files}; do
            _appname="${_thisfile%%/*}" _filename="${_thisfile##*/}"
            echo "::debug::_thisfile, _appname are ..." && \
              echo "${_thisfile} ${_appname}"

            if [ -f "${_thisfile}" ]; then
              _tag=${{ github.repository_owner }}/"${_appname}":latest
              tar c -C "${_appname}" . | docker build \
                --build-arg image_version="${_image_ver}" \
                --quiet \
                --tag "${_tag}" \
                - || exit
              echo "Built '${_tag}' OK."
              _images="${_images} ${_tag}"
            fi

            if [ -z "${_images}" ]; then
              echo "Failed to build any Dockerfiles."
              exit 1
            else
              echo "::set-output name=images::${_images}"
            fi
          done

      - name: Push image(s) to ghcr.io
        run: |
          _images="${{ steps.buildimage.outputs.images }}"

          echo "${{ secrets.PAT }}" | \
          docker login ghcr.io \
            -u ${{ github.actor }} --password-stdin

          for _thisimage in ${_images}; do
            # For GitHub's registry, prepend ghcr.io
            _mytag="ghcr.io/${_thisimage}"
            docker tag "${_thisimage}" "${_mytag}"
            echo "::debug::Pushing ${_mytag}"
            docker push "${_mytag}"
          done

      - name: Push image(s) to Docker hub
        run: |
          _images="${{ steps.buildimage.outputs.images }}"

          echo "${{ secrets.dockerhub_token }}" | \
          docker login -u ${{ github.actor }} --password-stdin

          for _thisimage in ${_images}; do
            echo "::debug::Pushing ${_thisimage}"
            docker push "${_thisimage}"
          done
